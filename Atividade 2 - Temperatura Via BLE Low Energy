#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/i2c.h"
#include "hardware/uart.h"

#define MPU6050_ADDR     0x68
#define TEMP_OUT_H       0x41
#define PWR_MGMT_1       0x6B
#define I2C_PORT         i2c0
#define SDA_PIN          4
#define SCL_PIN          5
#define UART_ID          uart0
#define UART_TX_PIN      0
#define UART_RX_PIN      1
#define UART_BAUDRATE    9600

typedef struct {
    float temperatura;
} SensorData;

bool mpu6050_init() {
    uint8_t buf[] = {PWR_MGMT_1, 0x00};
    int res = i2c_write_blocking(I2C_PORT, MPU6050_ADDR, buf, 2, false);
    return (res == 2);
}

bool read_temp_raw(int16_t *raw) {
    uint8_t reg = TEMP_OUT_H;
    uint8_t buf[2];
    if (i2c_write_blocking(I2C_PORT, MPU6050_ADDR, &reg, 1, true) != 1) return false;
    if (i2c_read_blocking(I2C_PORT, MPU6050_ADDR, buf, 2, false) != 2) return false;
    *raw = (int16_t)((buf[0] << 8) | buf[1]);
    return true;
}

float convert_temp(int16_t raw) {
    return (raw / 340.0f) + 36.53f;
}

bool obter_dados_mpu6050(SensorData *data) {
    int16_t temp_raw;
    if (!read_temp_raw(&temp_raw)) return false;
    data->temperatura = convert_temp(temp_raw);
    return true;
}

void init_i2c() {
    i2c_init(I2C_PORT, 400 * 1000);
    gpio_set_function(SDA_PIN, GPIO_FUNC_I2C);
    gpio_set_function(SCL_PIN, GPIO_FUNC_I2C);
    gpio_pull_up(SDA_PIN);
    gpio_pull_up(SCL_PIN);
}

void init_uart() {
    uart_init(UART_ID, UART_BAUDRATE);
    gpio_set_function(UART_TX_PIN, GPIO_FUNC_UART);
    gpio_set_function(UART_RX_PIN, GPIO_FUNC_UART);
}

void enviar_via_uart(float temperatura) {
    char msg[32];
    snprintf(msg, sizeof(msg), "Temperatura: %.2f C\n", temperatura);
    uart_puts(UART_ID, msg);
}

int main() {
    stdio_init_all();
    init_i2c();
    init_uart();
    sleep_ms(500);
    if (!mpu6050_init()) {
        printf("Erro ao iniciar MPU6050.\n");
        return 1;
    }
    while (true) {
        SensorData dados;
        if (obter_dados_mpu6050(&dados)) {
            printf("Temperatura: %.2f Â°C\n", dados.temperatura);
            enviar_via_uart(dados.temperatura);
        } else {
            printf("Falha ao ler temperatura do sensor.\n");
        }
        sleep_ms(2000);
    }
    return 0;
}
